	Ciclo de ciencia de datos:

-En nuestro modelo del proceso de ciencia de datos, se comienza con la importacion y el orden de los datos.
 Comprende sus datos con un ciclo iterativo de transformacion, visualizacion y modelado. Terminando el proceso
 comunicando tus resultados a otros humanos.

	Visualizacion:
-Es una actividad fundamentalmente humana. Una buena visualizacion tambien podria indicar que estas haciendo la pregunta
 equivocada o que necesitas recopilar datos diferentes. Las visualizaciones pueden sorprenderte, pero no se escalan particularmente
 bien porque requieren de un humano que las interprete. 

 	Los modelos:
-Son herramientas complementarias a la visualizacion. Una vez que haya formulado sus preguntas lo suficientemente precisas, 
 podra utilizar un modelo para responderlas. Los modelos son esencialmente herramientas matematicas o computacionales, generalmente
 escalan bien. Incluso cuando no lo hacen "generalmente es mas barato comprar mas computadoras que comprar mas cerebros". Pero todo 
 modelo parte de supociciones y por su propia naturaleza, un modelo no puede cuestionar sus propias suposiciones.

 	La programacion:
-La programacion es un herramienta que se utiliza en casi todas las partes de un proyecto de analisis de datos. No es necesario ser un
 programador experto para ser un cientifico de datos exitoso, pero aprender mas sobre programacion vale la pena porque convertirte en un
 buen programador le permite automatizar las tareas comunes y resolver nuevos problemas con mayor facilidad.

 	REQUISITOS PREVIOS:

-Descargar R: vamos al CRAN, la red integral de archivos de R, https://cloud.r-project.org/ 
 Una version nueva de R sale cada año acompañado de dos menores, es una buena practica tener actualizados los paquetes de R.

-Descargar RStudio: RStudio es un entorno de desarrollo integrado, o IDE, para programacion en R, que se puede descargar en: 
 https://posit.co/download/rstudio-desktop/
 Una vez descargados, los ejecutamos como administradores. 
 

	PAQUETES Y TIDYVERSE:

-Un paquete en R es una coleccion de funciones, datos y documentacion que amplian la capacidad de R base.
 La mayoria de los paquetes que emplearemos en este curso son parte del sistema llamado Tidyverse.

	INSTALANDO TIDYSERSE:
-Escribimos la siguiente linea de codigo en la consola: install.packages("tidyverse")
 Una vez ejecutada la linea de comando, R descargara los paquetes del CRAN y los instalara en la PC.

 No podremos utilizar las funciones, objetos o archivos de ayuda de un paquete hasta que lo carguemos
 como libreria con el comando: library(tidyverse)

 library(tidyverse)
#> ── Attaching core tidyverse packages ───────────────────── tidyverse 2.0.0 ──
#> ✔ dplyr     1.1.3     ✔ readr     2.1.4
#> ✔ forcats   1.0.0     ✔ stringr   1.5.1
#> ✔ ggplot2   3.4.4     ✔ tibble    3.2.1
#> ✔ lubridate 1.9.3     ✔ tidyr     1.3.0
#> ✔ purrr     1.0.2     
#> ── Conflicts ─────────────────────────────────────── tidyverse_conflicts() ──
#> ✖ dplyr::filter() masks stats::filter()
#> ✖ dplyr::lag()    masks stats::lag()
#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors

Esto nos indica que "tidyverse" carga 9 paquetes: dplyr, forcats, ggplot2, lubridate, purrr, read, stringr y tidyr. Estos se
consideran el nucleo de "tidyverse" porque los usara en casi todos los analisis.

	ACTALIZACIONES:
-Los paquetes cambian con bastante frecuencia. Podemos ver si hay actualizaciones diponibles ejecutando:
 tidyverse_update()

	ERRORES DE INSTALACION:
-library(ggrepel)
#> Error in library(ggrepel) : there is no package called ‘ggrepel’

Cada vez que vemos un error como este solo debemos ejecutar el comando install.packages("ggrepel)

	CODIGO:

-Usaremos un conjunto de convenciones para referirnos al libro:
	-Las funciones se muestran en una fuente de codigo y seguidas de parentesis, como sum(), mean().
	-Otros objetos de R (como datos o rgumentos de funciones) estan en ua fuente de codigo, sin parentesis, como fligths o x
	-A veces, para saber de que paquete proviene un objeto, usaremos el nombre del paquete seguido de dos puntos, como 
	 dplyr::mutate() o nycflights13::flights.

	 
