
3.1 INTRODUCCION:

    La visualizacion es una herramienta importante, pero es raro cuando obtenemos la informacion exactamente como la
    necesitamos para crear ese grafico deseado.

    3.1.2 VUELOS nycf13

    Usaremos el paquete "nycflights13" Este conjunto de datos contiene los 336,776 vuelos que partieron de la ciudad de 
    New York en el 2013. Los datos provienen de la Oficina de Estadistica de  Transporte de E.U. y estan documentados en 
    ?flights

    Instalamos el paquete:

    > install.packages("nycflights13")

    Cargamos la libreria:

    > library(nycflights13)

    Podemos ver un resumen de los datos con el comando ya sea en el editor o en la consola, escribiendo:

    > nycflights13::flights
# A tibble: 336,776 × 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>  
 1  2013     1     1      517            515         2      830            819        11 UA        1545 N14228 
 2  2013     1     1      533            529         4      850            830        20 UA        1714 N24211 
 3  2013     1     1      542            540         2      923            850        33 AA        1141 N619AA 
 4  2013     1     1      544            545        -1     1004           1022       -18 B6         725 N804JB 
 5  2013     1     1      554            600        -6      812            837       -25 DL         461 N668DN 
 6  2013     1     1      554            558        -4      740            728        12 UA        1696 N39463 
 7  2013     1     1      555            600        -5      913            854        19 B6         507 N516JB 
 8  2013     1     1      557            600        -3      709            723       -14 EV        5708 N829AS 
 9  2013     1     1      557            600        -3      838            846        -8 B6          79 N593JB 
10  2013     1     1      558            600        -2      753            745         8 AA         301 N3ALAA 
# ℹ 336,766 more rows
# ℹ 7 more variables: origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,
#   time_hour <dttm>
# ℹ Use `print(n = ...)` to see more rows


3.2.2 TIBLLE (titubeo)
flights es un "tibble" un tipo especial de marco de datos utilizado por tidyverse para evitar algunos errores comunes. 
La diferencia mas notable entre tibbles y marcos de datos es la forma en la que se imprimen los tibles; estan diseñados
para conjuntos de datos grandes, por lo que solo muestran las primeras filas y solo las columnas que caben en la pantalla.

View(flights) abrira una vista interactiva desplazable y filtrable en ventana de edicion.

glimpse(flights) es una funcion de el paquete "tidyverse" asi que tenemos que cargar previamente este paquete (tidyverse), 
para poder hacer uso de la funcion, que nos muestra cuales son las columnas de una tabla, asi como su data type y los primeros
registros de cada campo.

> glimpse(flights)
Rows: 336,776
Columns: 19
$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 20…
$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…
$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…
$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, 558, 558, 558, 559, 559, 559, 6…
$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, 600, 600, 600, 600, 559, 600, 6…
$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1, 0, -1, 0, 0, 1, -8, -3, -4, -…
$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849, 853, 924, 923, 941, 702, 854, …
$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851, 856, 917, 937, 910, 706, 902, …
$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -14, 31, -4, -8, -7, 12, -6, -8, …
$ carrier        <chr> "UA", "UA", "AA", "B6", "DL", "UA", "B6", "EV", "B6", "AA", "B6", "B6", "UA", "UA", "A…
$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 49, 71, 194, 1124, 707, 1806, 11…
$ tailnum        <chr> "N14228", "N24211", "N619AA", "N804JB", "N668DN", "N39463", "N516JB", "N829AS", "N593J…
$ origin         <chr> "EWR", "LGA", "JFK", "JFK", "LGA", "EWR", "EWR", "LGA", "JFK", "LGA", "JFK", "JFK", "J…
$ dest           <chr> "IAH", "IAH", "MIA", "BQN", "ATL", "ORD", "FLL", "IAD", "MCO", "ORD", "PBI", "TPA", "L…
$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 158, 345, 361, 257, 44, 337, 152…
$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, 1028, 1005, 2475, 2565, 1389, 1…
$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,…
$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 10, 5, 10, 10, 7, 0,…
$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2…

La cual nos muestra informacion mas detallada de cada columna asi como su "data type" <int> es un entero, <dbl>
es la abreviatura de doble o de un real, <chr> de caracter, tambien conocido como cadena, <dttm> de fecha y hora.
Esta informacion es importante porque las operaciones que podemos realizar a una columna dependen de gran medida
de su data type.


3.1.3 CONCEPTOS BASICOS DE dplyr

Generalidades de funciones en la libreria dplyr:

    1. EL primer argumento es siempre un marco de datos.

    2. Los argumentos siguientes normalmente describen en que columnas operar,
    utilizando los nombres de las variables (sin comillas).

    3.La salida siempre es un nuevo marco de datos (Base Datos).

Debido a que cada funcion hace bien una cosa, se requerira para resolver problemas complejos anidar funciones y 
lo haremos con la barra vertical y mayor que "|>" Hablaremos mas adelante en 3.4 sobre tuberias, pero en resumen las tuberias
toman lo que esta a su izquierda y lo pasa a la funcion a su derecha, de modo que x |> f(y) equivale a f(x, y)
y x |> f(y) |> g(z) es equivalente a g(f(x, y), z). Esto hace posible entender:

> flights |>  # Pasamos la data completa y la anidamos por medio de tuberia |>
+   filter(dest == "BQN") |> # Filtramos toda la data por la columna "dest" el registro llamado "BQN" y lo pasamos por la tuberia |>
+   group_by(year, month, day) |> # agrupamos por las columnas de año, mes y dia y pasamos |>
+   summarize(
+     arr_delay = mean(arr_delay, na.rm = TRUE)
+   )
`summarise()` has grouped output by 'year', 'month'. You can override using the `.groups` argument.
# A tibble: 365 × 4
# Groups:   year, month [12]
    year month   day arr_delay
   <int> <int> <int>     <dbl>
 1  2013     1     1     17.8 
 2  2013     1     2      7   
 3  2013     1     3     18.3 
 4  2013     1     4     -3.2 
 5  2013     1     5     20.2 
 6  2013     1     6      9.28
 7  2013     1     7     -7.74
 8  2013     1     8      7.79
 9  2013     1     9     18.1 
10  2013     1    10      6.68
# ℹ 355 more rows
# ℹ Use `print(n = ...)` to see more rows


    Las funciones de dplyr estan organizados en cuatro grandes grupos segun en que operan: filas, columnas, grupos o tablas.

3.2 FILAS:

    La funcion mas importante que opera en las filas, registros o rows de un conjunto de datos
    son "filter()" que cambia que filas estan presentes sin cambiar su orden, y "arrange()" que
    cambia el orden de las filas sin cambiar cuales estan presentes. Ambas funciones solo afectan 
    a las filas no modifican a las columnas.
    "distinct()" que encuentra filas con valores unicos pero diferentes "arrange()" y "filter()"


    
    3.2.1 filter()
    Permite mantener filtros basadas en los valores de las columnas. El primer argumento es el marco
    de datos. El segundo argumento y los siguientes son las condiciones que deben de ser verdaderas
    para mantener la fila.

    Ejercicio: queremos todos los vuelos que salieron con mas de 120 min de retraso

    > flights |>
+   filter(dep_delay > 120)

# A tibble: 9,723 × 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>  
 1  2013     1     1      848           1835       853     1001           1950       851 MQ        3944 N942MQ 
 2  2013     1     1      957            733       144     1056            853       123 UA         856 N534UA 
 3  2013     1     1     1114            900       134     1447           1222       145 UA        1086 N76502 
 4  2013     1     1     1540           1338       122     2020           1825       115 B6         705 N570JB 
 5  2013     1     1     1815           1325       290     2120           1542       338 EV        4417 N17185 
 6  2013     1     1     1842           1422       260     1958           1535       263 EV        4633 N18120 
 7  2013     1     1     1856           1645       131     2212           2005       127 AA         181 N323AA 
 8  2013     1     1     1934           1725       129     2126           1855       151 MQ        4255 N909MQ 
 9  2013     1     1     1938           1703       155     2109           1823       166 EV        4300 N18557 
10  2013     1     1     1942           1705       157     2124           1830       174 MQ        4410 N835MQ 
# ℹ 9,713 more rows
# ℹ 7 more variables: origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,
#   time_hour <dttm>
# ℹ Use `print(n = ...)` to see more rows

  
    Ademas de > (mayor que), podemos usar >= (mayor o igual que), < (menor que), <= (menor o igual que), == (igual que)
    y != (distinto de). Tambien podemos combinar condiciones con los operadores "&" para indicar "y" o con "|" para
    indicar "o" 


    Ejercicio: queremos una base de datos con todos los vuelos del primero de enero:

    > flights |>
+   filter(month == 1 & day == 1)
# A tibble: 842 × 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>  
 1  2013     1     1      517            515         2      830            819        11 UA        1545 N14228 
 2  2013     1     1      533            529         4      850            830        20 UA        1714 N24211 
 3  2013     1     1      542            540         2      923            850        33 AA        1141 N619AA 
 4  2013     1     1      544            545        -1     1004           1022       -18 B6         725 N804JB 
 5  2013     1     1      554            600        -6      812            837       -25 DL         461 N668DN 
 6  2013     1     1      554            558        -4      740            728        12 UA        1696 N39463 
 7  2013     1     1      555            600        -5      913            854        19 B6         507 N516JB 
 8  2013     1     1      557            600        -3      709            723       -14 EV        5708 N829AS 
 9  2013     1     1      557            600        -3      838            846        -8 B6          79 N593JB 
10  2013     1     1      558            600        -2      753            745         8 AA         301 N3ALAA 
# ℹ 832 more rows
# ℹ 7 more variables: origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,
#   time_hour <dttm>
# ℹ Use `print(n = ...)` to see more rows


    Ejericio: Queremos una data con todos los vuelos que salieron el mes de enero o febrero

    > flights |>
+     filter(month == 1 | month == 2)
# A tibble: 51,955 × 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>  
 1  2013     1     1      517            515         2      830            819        11 UA        1545 N14228 
 2  2013     1     1      533            529         4      850            830        20 UA        1714 N24211 
 3  2013     1     1      542            540         2      923            850        33 AA        1141 N619AA 
 4  2013     1     1      544            545        -1     1004           1022       -18 B6         725 N804JB 
 5  2013     1     1      554            600        -6      812            837       -25 DL         461 N668DN 
 6  2013     1     1      554            558        -4      740            728        12 UA        1696 N39463 
 7  2013     1     1      555            600        -5      913            854        19 B6         507 N516JB 
 8  2013     1     1      557            600        -3      709            723       -14 EV        5708 N829AS 
 9  2013     1     1      557            600        -3      838            846        -8 B6          79 N593JB 
10  2013     1     1      558            600        -2      753            745         8 AA         301 N3ALAA 
# ℹ 51,945 more rows
# ℹ 7 more variables: origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,
#   time_hour <dttm>
# ℹ Use `print(n = ...)` to see more rows


    Ejercicio: Una forma mas corta de seleccionar vuelos que salieron en enero o febrero. Con el operador in y un vector.

    > flights |> 
    + arrange(year, month, day, dep_time)


# A tibble: 336,776 × 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time distance  hour minute time_hour          
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>    <dbl> <dbl>  <dbl> <dttm>             
 1  2013     1     1      517            515         2      830            819        11 UA        1545 N14228  EWR    IAH        227     1400     5     15 2013-01-01 05:00:00
 2  2013     1     1      533            529         4      850            830        20 UA        1714 N24211  LGA    IAH        227     1416     5     29 2013-01-01 05:00:00
 3  2013     1     1      542            540         2      923            850        33 AA        1141 N619AA  JFK    MIA        160     1089     5     40 2013-01-01 05:00:00
 4  2013     1     1      544            545        -1     1004           1022       -18 B6         725 N804JB  JFK    BQN        183     1576     5     45 2013-01-01 05:00:00
 5  2013     1     1      554            600        -6      812            837       -25 DL         461 N668DN  LGA    ATL        116      762     6      0 2013-01-01 06:00:00
 6  2013     1     1      554            558        -4      740            728        12 UA        1696 N39463  EWR    ORD        150      719     5     58 2013-01-01 05:00:00
 7  2013     1     1      555            600        -5      913            854        19 B6         507 N516JB  EWR    FLL        158     1065     6      0 2013-01-01 06:00:00
 8  2013     1     1      557            600        -3      709            723       -14 EV        5708 N829AS  LGA    IAD         53      229     6      0 2013-01-01 06:00:00
 9  2013     1     1      557            600        -3      838            846        -8 B6          79 N593JB  JFK    MCO        140      944     6      0 2013-01-01 06:00:00
10  2013     1     1      558            600        -2      753            745         8 AA         301 N3ALAA  LGA    ORD        138      733     6      0 2013-01-01 06:00:00


    Ejercicio: Ordenar el marco de datos flights por el campo dep_delay de forma descendente (mayor a menor).

    > flights |> 
+ arrange(desc(dep_delay))


# A tibble: 336,776 × 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time distance  hour minute
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>    <dbl> <dbl>  <dbl>
 1  2013     1     9      641            900      1301     1242           1530      1272 HA          51 N384HA  JFK    HNL        640     4983     9      0
 2  2013     6    15     1432           1935      1137     1607           2120      1127 MQ        3535 N504MQ  JFK    CMH         74      483    19     35
 3  2013     1    10     1121           1635      1126     1239           1810      1109 MQ        3695 N517MQ  EWR    ORD        111      719    16     35
 4  2013     9    20     1139           1845      1014     1457           2210      1007 AA         177 N338AA  JFK    SFO        354     2586    18     45
 5  2013     7    22      845           1600      1005     1044           1815       989 MQ        3075 N665MQ  JFK    CVG         96      589    16      0
 6  2013     4    10     1100           1900       960     1342           2211       931 DL        2391 N959DL  JFK    TPA        139     1005    19      0
 7  2013     3    17     2321            810       911      135           1020       915 DL        2119 N927DA  LGA    MSP        167     1020     8     10
 8  2013     6    27      959           1900       899     1236           2226       850 DL        2007 N3762Y  JFK    PDX        313     2454    19      0
 9  2013     7    22     2257            759       898      121           1026       895 DL        2047 N6716C  LGA    ATL        109      762     7     59
10  2013    12     5      756           1700       896     1058           2020       878 AA         172 N5DMAA  EWR    MIA        149     1085    17      0
# ℹ 336,766 more rows
# ℹ 1 more variable: time_hour <dttm>
# ℹ Use `print(n = ...)` to see more rows



    Notas: Notemos que el numero de filas no ha cambiado, solo estamos organizando los datos, no los estamos filtrando.



    3.2.4 DISTINCT()

        Encuentra todas las filas unicas en un conjunto de datos, por lo que, opera principalmente en las filas. Sin embargo,
        la mayoria de las veces querras la combinacion distinta de algunas variables, por lo que tambien puedes proporcionar
        nombres de columnas.



        Ejercicio: proporcionar marco de datos solo con valores unicos.

        > flights |>
+ distinct()
# A tibble: 336,776 × 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time distance  hour minute
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>    <dbl> <dbl>  <dbl>
 1  2013     1     1      517            515         2      830            819        11 UA        1545 N14228  EWR    IAH        227     1400     5     15
 2  2013     1     1      533            529         4      850            830        20 UA        1714 N24211  LGA    IAH        227     1416     5     29
 3  2013     1     1      542            540         2      923            850        33 AA        1141 N619AA  JFK    MIA        160     1089     5     40
 4  2013     1     1      544            545        -1     1004           1022       -18 B6         725 N804JB  JFK    BQN        183     1576     5     45
 5  2013     1     1      554            600        -6      812            837       -25 DL         461 N668DN  LGA    ATL        116      762     6      0
 6  2013     1     1      554            558        -4      740            728        12 UA        1696 N39463  EWR    ORD        150      719     5     58
 7  2013     1     1      555            600        -5      913            854        19 B6         507 N516JB  EWR    FLL        158     1065     6      0
 8  2013     1     1      557            600        -3      709            723       -14 EV        5708 N829AS  LGA    IAD         53      229     6      0
 9  2013     1     1      557            600        -3      838            846        -8 B6          79 N593JB  JFK    MCO        140      944     6      0
10  2013     1     1      558            600        -2      753            745         8 AA         301 N3ALAA  LGA    ORD        138      733     6      0
# ℹ 336,766 more rows
# ℹ 1 more variable: time_hour <dttm>
# ℹ Use `print(n = ...)` to see more rows


    Ejercicio: encuentra todos los pares unicos de origen y destino.


> flights |>
+ distinct(origin, dest)


# A tibble: 224 × 2
   origin dest 
   <chr>  <chr>
 1 EWR    IAH  
 2 LGA    IAH  
 3 JFK    MIA  
 4 JFK    BQN  
 5 LGA    ATL  
 6 EWR    ORD  
 7 EWR    FLL  
 8 LGA    IAD  
 9 JFK    MCO  
10 LGA    ORD  
# ℹ 214 more rows
# ℹ Use `print(n = ...)` to see more rows


    Ejercicio: encuentra todos los pares unicos de origen y destino, conservando las demas columnas o campos.

> flights |>
+ distinct(origin, dest, .keep_all = TRUE)


# A tibble: 224 × 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time distance  hour minute time_hour          
   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl> <chr>    <int> <chr>   <chr>  <chr>    <dbl>    <dbl> <dbl>  <dbl> <dttm>             
 1  2013     1     1      517            515         2      830            819        11 UA        1545 N14228  EWR    IAH        227     1400     5     15 2013-01-01 05:00:00
 2  2013     1     1      533            529         4      850            830        20 UA        1714 N24211  LGA    IAH        227     1416     5     29 2013-01-01 05:00:00
 3  2013     1     1      542            540         2      923            850        33 AA        1141 N619AA  JFK    MIA        160     1089     5     40 2013-01-01 05:00:00
 4  2013     1     1      544            545        -1     1004           1022       -18 B6         725 N804JB  JFK    BQN        183     1576     5     45 2013-01-01 05:00:00
 5  2013     1     1      554            600        -6      812            837       -25 DL         461 N668DN  LGA    ATL        116      762     6      0 2013-01-01 06:00:00
 6  2013     1     1      554            558        -4      740            728        12 UA        1696 N39463  EWR    ORD        150      719     5     58 2013-01-01 05:00:00
 7  2013     1     1      555            600        -5      913            854        19 B6         507 N516JB  EWR    FLL        158     1065     6      0 2013-01-01 06:00:00
 8  2013     1     1      557            600        -3      709            723       -14 EV        5708 N829AS  LGA    IAD         53      229     6      0 2013-01-01 06:00:00
 9  2013     1     1      557            600        -3      838            846        -8 B6          79 N593JB  JFK    MCO        140      944     6      0 2013-01-01 06:00:00
10  2013     1     1      558            600        -2      753            745         8 AA         301 N3ALAA  LGA    ORD        138      733     6      0 2013-01-01 06:00:00
# ℹ 214 more rows
# ℹ Use `print(n = ...)` to see more rows


    Notas: distinct() encontrara la primera coincidencia en una fila unica en el conjunto de datos y descartara el resto.



    Ejercicio: Encontrar el numero de apariciones de forma unica que aparecen los registros de los campos origin y dest
    
> flights |>
+ count(origin, dest)


# A tibble: 224 × 3
   origin dest      n
   <chr>  <chr> <int>
 1 EWR    ALB     439
 2 EWR    ANC       8
 3 EWR    ATL    5022
 4 EWR    AUS     968
 5 EWR    AVL     265
 6 EWR    BDL     443
 7 EWR    BNA    2336
 8 EWR    BOS    5327
 9 EWR    BQN     297
10 EWR    BTV     931
# ℹ 214 more rows
# ℹ Use `print(n = ...)` to see more rows


EJERCICIOS:











