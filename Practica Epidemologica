
1. Partimos por instalar el packages "pacman" y cargarlo.
  >install.packages("pacman")
  >library(pacman)

2. Instalando paquete R de trabajo llamado "epirhandbook". Este incluye la funcion "download_book()" que descarga el archivo manual       
  desde   el reporsitorio de Github. Este paquete no esta en el CRAN (Comprehensive R Archive Network/ Red Integral de Archivos de R) asi que necesitamos usar la funcion especial

  p_install_gh("appliedepi/epirhandbook") una funcion del paquete "pacman"

  >pacman::p_install_gh("appliedepi/epirhandbook")

  Y podemos cargarlo usando "pacman" para usarlo en la sesion actual:

  >pacman::p_load(epirhandbook)

  Acontinuacion ejecutamos la funcion del paquete "download_book()" para descargar el manual en el ordenador:

  > epirhandbook::download_book()  #Esta linea descarga el libro donde nosotros lo indiquemos.

  La funcion epirhandbook::get_data("all") la ejecutamos para descargar todos los ejemplos en nuestro ordenador. 
  Sugerimos crear una carpeta ya que son mas de 70 files que se descargaran en tu ordenador. 

  >epirhandbook::get_data("all")  # descarga todos los datos de ejemplo en la computadora.

3. Para importar archivos, debemos instalar el packages "rio" lo podemos hacer usando pacman, 
  para que lo instale y lo carge en la sesion actual:

  > pacman::p_load(rio) # instalar y cargar el paquete "rio"

  Con el packages "rio" podemos hacer uso de la funcion "import" con esta funcion podemos importar data desde GitHub por ejemplo:

  > cleaning <- import("https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/cleaning_dict.csv")
 
  Estamos guardando la data en una variable llamada "cleaning", la podemos visualizar con el comando:

  >glimpse(cleaning) # A saber que glimpse es una funcion de el packages "tidyserse"

  Este solo es un diccionario de limpieza que contiene:

  > cleaning_dict <- import("https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/cleaning_dict.csv")
  > 
  > glimpse(cleaning_dict)
  Rows: 9
  Columns: 3
  $ from <chr> "yes", "no", "dth", "mort", "femme", "f", "m", "Port hospital", "funeraille"
  $ to   <chr> "1", "0", "death", "death", "F", "F", "M", "Port Hospital", "funeral"
  $ col  <chr> ".global", ".global", "outcome", "outcome", "gender", "gender", "gender", "hospital", "source"


4. Un archivo .rds es un tipo de archivo especifico de R que conserva los tipos de columnas. Esto asegura que solo 
  tenemos que hacer una limpieza minima despues de importar los datos a R.

  Si tenemos un archivo.rds lo podemos cargar en R mediante la funcion readRDS("Path")

> malaria_facility_count_data <- readRDS("C:/RStudio/Repositorio/malaria_facility_count_data.rds")


5. Datos en escala Likert, podemos descargar los datos mediante el packages "rio" con la funcion importar.
  Se trata de una encuesta tipo Likert, utilizada en la escala sobre piramides de poblacion y escalas de 
  Likert. Este archivo se encuentra en los archivos que hemos descargado en la carpeta de "Libros" lo podemos
  cargar con el packages "rio" de la siguiente manera:

  > likert_data <- read.csv("C:/Users/Jofiel/Documents/R for Data Cience/Libros/likert_data.csv")

  > glimpse(likert_data)

Rows: 38
Columns: 9
$ status <chr> "Senior", "Junior", "Intermediate", "Intermediate", "Senior", "Junior", "Senior", "Senior", "Senior", "Senior", "Senior", "Junior", "Senior", "Junior", "…
$ Q1     <chr> "Very Good", "Very Good", "Good", "Good", "Very Good", "Good", "Very Good", "Good", "Good", "Good", "Good", "Good", "Good", "Good", "Very Good", "Good", …
$ Q2     <chr> "Very Good", "Very Good", "Good", "Poor", "Very Poor", "Very Good", "Very Good", "Good", "Very Good", "Very Good", "Very Good", "Very Good", "Good", "Ver…
$ Q3     <chr> "Good", "Very Good", "Good", "Poor", "Good", "Good", "Very Good", "Very Good", "Very Good", "Good", "Very Good", "Very Good", "Poor", "Good", "Good", "Go…
$ Q4     <chr> "Very Poor", "Very Good", "Very Good", "Very Poor", "Poor", "Very Poor", "", "Very Good", "Very Poor", "Very Poor", "Very Poor", "Good", "Very Poor", "Ve…
$ Q5     <chr> "Not applicable", "Very Good", "Not applicable", "Not applicable", "Poor", "Not applicable", "", "Poor", "Not applicable", "Poor", "Not applicable", "Goo…
$ Q6     <chr> "Not applicable", "Very Good", "Not applicable", "Not applicable", "Very Poor", "Not applicable", "", "Not applicable", "Not applicable", "Not applicable…
$ Q7     <chr> "Very Good", "Very Good", "Good", "Good", "Good", "Good", "", "Very Good", "Not applicable", "Very Good", "Good", "Good", "Poor", "Good", "Good", "Poor",…
$ Q8     <chr> "Very Good", "Very Good", "Good", "Good", "Good", "Good", "Very Good", "Very Good", "Good", "Very Good", "Good", "Very Good", "Good", "Very Good", "Good"…


6. POR QUE UTILIZAR R?

    Como se indica en la pagina web de R project este es un lenguaje de programacion y un entorno para la computacion estadistica y graficos. Es muy versatil, ampliable y dirigido a la comunidad.

    -Coste: 

    El uso de R es gratuito. Hay una fuerte etica de la comunidad de mantener el codigo abierto.

    -Reproducibilidad:

    La gestion y el analisis de los datos a traves de un lenguaje de programacion (en comparacion de Excel) mejora la reproducibilidad,
    facilita la detencion de errores y alivia la carga de trabajo.


    -Comunidad:

    La comunidad de usuarios de R es enorme y colaborativa. Cada dia se desarrollan nuevos packages y herramientas para abordar problemas
    cotidianos.


    -Terminos clave:

    RStudio: es una interfaz grafica de usuario (GUI) para facilitar el uso de R.

    Objetos: todo lo que se almacena en R - conjuntos de datos, variables, una lista de pueblos, un numero total de poblacion incluso 
    graficos - son OBJETOS a los que se le asigna un nombre y pueden ser diferenciados en comandos posteriores.

    Funciones:  es una operacion de codigo que acepta entradas y devuelve una salida transformada.

    Paquetes:  es un conjunto de funciones que se pueden compartir.

    Scripts: es un archivo que contiene una serie de comandos. 


    -RStudio: 

    es una interfaz de usuario (GUI) para facilitar el uso de R. Puedes pensar a R como el motor de un vehiculo, que hace el trabajo 
    crucial y RStudio es la carroceria del vehiculo.

    
    RStudio muestra cuatro paneles rectangulares.

    1. EL panel principal (Source Pane):

      Este panel en la parte superior izquierda, es un espacio para editar, ejecutar y guardar tus scripts. Los scripts contionen los
      comandos que deseamos ejecutar. Este panel tambien puede mostrar conjuntos de datos (data frames) para su visualizacion.

    2. El panel de consola (R Console Pane):

      La consola de R es el hogar del "motor" de R es, por defecto, el panel inferior izquierdo en RStudio. Aqui es donde se ejecutan
      realmente los comandos y aparecen las salidas no graficas y los mensajes de error/advertencia. Podemos introducir y ejecutar directamente los comandos en la consola de R, pero ten en cuenta que estos comandos no se guardan como cuando se ejecutan los 
      comandos desde un script.

    3. El panel de entorno (Environment Pane):

      Este panel por defecto se ubica en la parte superior derecha, se utiliza mas a menudo para ver breves resumenes de los objetos en el entorno R en la sesion actual. Estos objetos pueden incluir conjuntos de datos importados, modificados o creados, parametros que
      hayas definido (ejemplo: una semana especifica para el analisis), o vectores o listas que hayas definido durante el analisis. Podemos hacer click en la flecha situada junto al nombre de un dataframe oara ver sus variables.

      Este panel tambien contiene History donde puedes ver los comandos ejecutados anteriormente. Tambien contiene una pestaña "tutorial"
      donde podemos completar tutoriales interactivos de R si tienes el paquete "learnr" instalado. Tambien tiene una pestaña de "conexiones" para las conexiones externas y puede tener un panel "Git" si deseas interactual con Github.
      
    4. Panel de archivos (Files Pane):

      Panel de files, plots, packages, help y viewer, este panel esta ubicado en la parte inferir derecha incluye varias pestañas importantes. La pestaña File (Archivos) permite navegar por las carpetas y puede utilizarse para abrir o eliminar archivos. En la pestaña Plots (Graficos), se mostrara todos los graficos, incluyendo los mapas. Las salidas interactivas o HTML se mostraran en la pestaña Viewer (Visor). El panel Packages (Paquetes), permite ver, instalar, actualizar, eliminar cargar/descargar paquetes de R y ver que version del paquete tienes. Por ultimo el panel de ayuda (Help) se mostrara la documentacion y los archivos de ayuda.


    -Algunos atajos de teclado utiles:


      Ctrl + s --> guardar script
      Ctrl + enter --> ejecutar las lines de comando actuales
      Ctrl + Shift + c --> nos ayuda a comentar/descomentar las lineas resaltadas (bastante bueno)
      Ctrl + Shift + m --> inserta el operador %>%
      Ctrl + l --> limpia la consola de R
      Ctrl + alt + b --> ejecuta en "Source Pane" todo el codigo desde el inicio hasta el final.
      Ctrl + alt + t --> ejecuta la seccion de codigo actual (R Markdown)
      Ctrl + alt + i --> inserta un trozo (chunk) de codigo (R Markdown)
      Las flechas de arriba/abajo en "Console Pane" recorre los comandos ejecutados recientemente.
      Ctrl + f --> habilita en la barra de herramientas buscar y reeemplazar.
      Ctrl + Shift + f --> buscar y reemplazar en muchos archivos.
      Tab --> cuando escribimos utiliza la funcion de autocompletar de RStudio. Esto puede evitar errores ortograficos.
      Ctrl + (flecha arriba) --> este atajos nos proporciona el historico en el "Console Pane"


    
    -FUNCIONES:

      Las funciones son la forma de realizar tareas y operaciones. Muchas vienen instaladas en R, mientras que otras estan disponibles para su descarga en packages.

      Las funciones se escriben en codigo-texto con parentesis abiertos, asi: filter(). Las funciones se descargan dentro de los paquetes. A veces en el codigo de ejemplo puede ver el nombre de la funcion vinculado explicitamente al nombre de su paquete con dos puntos (::) como dplyr::filter() .El proposito de esta vinculacion se explica en la seccion de paquetes.

      Funciones simples:

      Una funcion es como una maquina que recibe entradas, realiza alguna accion con esas entradas y produce una salida.
      Las funciones sulen operar sobre algun objeto colocado dentro de los parentesis de la funcion.

      Ejmplo: sqrt(49) --> aplica la funcion raiz cuadrada al objeto 49.

      Dado que R puede almacenar multiples conjuntos de datos, se tiene que especificar tanto el set de datos como la columna. Una forma de hacerlo es utilizar la notacion $ para vincular el nombre de lo datos y el nombre de la columna (dataset$column) 
      
      Ejemplo:
      En el siguiente ejemplo la funcion summary() se aplica a la columna numerica "age" en los datos "linelist" y la salida es un resumen de los valores numericos y faltantes de la columna.

  # Muestra estadisticas resumen de la columna "age" del dataset "linelist"
  >summary(linelist$age)

      Una funcion representa un codigo complejo que ha sido envuelto para el usuario en un comando sencillo.

      
      FUNCIONES CON MULTIPLES ARGUMENTOS:

      Las funciones suelen pedir varias entradas, llamadas argumentos, situadas dentro del parentesis de la funcion, normalmente separadas por comas.

      -Algunos argumentos son necesarios para que la funcion funcione correctamente otros son opcionales.
      
      -Los argumentos opcionales tienen una configuracion por defecto.

      -Los argumentos pueden tomar caracteres, valores logicos (true/false) y otras entradas.


      
      Ejemplo:

      bread <- oven_bake(dough, minutes = 45, temperature = 165)

      Aqui una divertida funcion ficticia, llamada "over_bake()" Toma un objeto de entrada ("input"), por ejemplo una base de datos, en este ejemplo dough (masa), y realiza operaciones en el segun lo especificado por los argumentos adicionales (minutes = ) y (temperature = ). La salida ("output") puede ir a la consola. o almacenarse como un "objeto" utilizando el operador de asignacion "<-"


      Ejemplos: 

      Un ejemplo mas realista, el comando age_pyramid() que aparece reproduce una piramide de edad basado en grupo de edad definidos. La funcion recibe tres argumentos dentro de los parentesis, separado por comas. La datafreame linelist, utiliza el argumento "age_cat5" como la columna a contar, y "gender" como la columna binaria a utilizar para dividir la piramide por color segun su genero.

  # Crear una piramide de edad 
  > age_pyramid(data=linelist, age_group="age_cat5", split_by="gender")

      Es una buena practica escribir nuestro codigo por linea para poder comentar. Este estilo puede ser mas facil de leer y mas facil de escribir "comentarios" con # para explicar cada linea del codigo (comentar nuestro codigo es cosiderado una buena practica).

  # Crear una piramide de edad
  > age_pyramid(
    data = linelist,  # usar los datos de linelist
    age_group = "age_cat5",   # especifica la columna para los grupos de edad
    split_by = "gender"   # usa la columna gender para los datos de la piramide
    )

    Ojo: no es necesario especificar el argumento (por ejemplo data =) si sus argumentos se escriben en su orden especifico, especificados en la documentacion de la funcion. El codigo siguiente produce exactamente la misma piramide.

  # Este codigo produce exactamente el mismo grafico
  > age_pyramid(linelist, "age_cat5", "gender")

    #EL ARGUMRNTO age_pyramid() mas complejo podria incluir argumentos opcionales.

  >age_pyramid(
    linelist,   # usamos la data line list
    "age_cat5",   # columna de los grupos de edad
    "gender",   # dividido por genero
    proporcional=TRUE,    # porcentajes en vez de numeros absolutos
    pal= c("orange","purple")   # colores
    )

    R es un lenguaje orientado a funciones, por lo que sentirnos orientados y cacitados para escribir tus propias funciones porta varias funciones:

      1. Facilita la programacion modular, i.e., separar el codigo en partes independientes y manejables.

      2. Sustituye el repetitivo copiar y pegar, que puede dar lugar a errores

      3. Se puede dar a las piezas de codigo nombres faciles de recordar

    Ojo: en el apartado "44 escribir funciones/Micelanea" se trata a profundidad como escribir funciones 

        
    
    BUSCAR UN PACKAGES DADA UNA FUNCION:

      Lo puedes hacer con la funcion "findFn()" esta funcion se encuentra en el packages "sos"

      >install.packages("sos")
      >library(sos)
      findFn("age_pyramid")

      
  3.7 PAQUETES (PACKAGES):

    Los paquetes contienen funciones. Son un conjunto de codigo y documentacion que se pueden compartir y que contienen funciones predefinidas. Los usuarios de la comunidad R desarrollan paquetes todo el tiempo atendiendo a problemas especificos. Es problable que aguno pueda ayudarte en tu trabajo!

    En la instalacion, R contiene paquetes "base" y funciones que realizan tareas elementales comunes.

    
    INSTALAR Y CARGAR

    Las funciones estan contenidas en paquetes que pueden descargarse ("instalarse") desde inernet. Una vez descargado el paquete, se almacena en tu libreria. Puedes acceder a las funciones que contiene durante una sesion en R cargando el paquete.

> "Piensa en R como tu libreria personal" Cuando se descarga un paquete, tu libreria adquiere un nuevo libro de funciones, pero cada   vez que quieras utilizar una funcion de ese libro, debes tomar prestado ("cargar") ese libro en tu libreria.

    -En resumen: para usar las funciones disponibles en un paquete de R, hay que realizar dos pasos:

    1. El paquete debe ser instalado
    2. El paquete debe ser cargado (cada sesion en R)


    TU LIBRERIA:

    es en realidad es una carpeta en tu ordenador, que contiene una carpeta para cada paquete que se ha instalado. Averigua donde esta instalado R en tu ordenador, si es windows, busca una carpeta llamada "win-library"

    INSTALAR DESDE CRAN:

    Lo habitual es que los usuarios descarguen packages desde el CRAN. CRAN (Comprehensive R Archive Network) es un almacen publico online de paquetes de R que han sido publicados por los miembros de la comunidad R.

    
    COMO INSTALAR Y CARGAR:

    En este manual sugerimos utilizar el paquete "pacman" (abreviatura de "packages manager"). Ofrece una interesante funcion "p_load()" que instala un paquete si es necesario y lo carga para su uso en la sesion actual de R. 

    EJEMPLO: uso de p_load()

    Solo hay que listar los nombres de los paquetes dentro de los parentesis de p_load() separado por comas. Ten en cuenta que la funcion es sensible entre mayusculas y minusculas. p_load() es conveniente y conciso si se comparten scripts con otros.

# instala (si es necesario) y carga los paquetes a utilizar 
> pacman::p_load(rio, tidyverse, here)

    Nota: hemos utilizado la sintaxis "pacman::p_load()" que escribe explicitamente el nombre del paquete "pacman" antes del nombre de la funcion "p_load()" conectado por dos puntos "::" esta sintaxis es util porque tambien carga el packages "pacman" (suponiendo que tambien este instalado).

    La funcion base alternativa que veremos a menudo. Para instalar un paquete es "install.packages()" El nombre del paquete a instalar debe proporcionarse entre comillas dentro de los parentesis. Si deseamos instalar varios paquetes en un solo comando, deben ser listados dentro de un vector de caracteres c()

# instalar un solo paquete
> install.packages("tidyverse") 

# instalar multiples paquetes con R base
> install.packages(c("tidyverse","rio","here"))

    La funcion base para cargar un paquete (despues de haberlo instalado) es "library()" Solo puedes cargar un paquete a la vez (otra razon para usar p_load()). Se puede escribir el nombre del paquete con o sin comillas. 

# carga los paquetes para usarlos con R base

>library(tidyverse)
>library(here)
>library(rio)

    Para comprobar si un paquete esta instalado y/o cargado, puedes mirar en la pestaña de packages de RStudio. Si el paquete esta instalado, se muestra con el numero de version, si la casilla esta marcada, esta cargado para la sesion actual.


    INSTALAR PACKAGES DESDE GITHUB:


    A veces, necesitas instalar un paquete que aun no esta disponible en CRAN. O tal vez el paquete esta disponible en el CRAN pero quieres la version en de desarrollo con nuevas caracteristicas que aun no estan disponibles en el CRAN. Estas suelen estar alojadas en el sitio web github.com en un repositorio de codigo gratuito y de acceso publico.

    Para instalar desde GitHub, tienes que instalar mas informacion:

    1. El Id de Github del propietario del repositorio.
    2. El nombre del reporsitorio que contiene el paquete.
    3. (opcional) El nombre de la "rama" (version de desarrollo especifica) que quieras descargar.

    Ejemplos: en los siguientes ejemplos, la primera palabra entre comillas es el ID de GitHub del propietario del repositorio, despues de la barra es el nombre del repositorio (el nombre del paquete)

# instala/carga el paquete epicontacts desde su repositorio de Github
> p_load_gh("reconhub/epicontacts")

    Si queremos instalar desde una "rama" (version) distinta de la rama principal, añade el nombre de la rama tras una @ despues del nombre del repositorio.

# instala el paquete epicontacts de la rama "timeline" desde Github
> p_load_gh("reconhub/epicontacts@timeline")


    INSTALAR DESDE ZIP O TAR:

    Se puede instalar el paquete desde una URL (Localizador Uniforme de Recursos):

> packageurl <- "https://cran.r-project.org/src/contrib/Archive/dsr/dsr_0.2.2.tar.gz"
> install.packages(packagurl, repos=NULL, type="source)

    O bien descargarlo en nuestro ordenador en un archivo comprimido, 
    1. usar la funcion install_local() del paquete remotes

> remotes::install_local("~/Downloads/dplyr-master.zip")

    2. usar install.packages() de R base, proporcionando la ruta del archivo ZIP y estableciendo type="source" y repos=NULL

>install.packages("~/Downloads/dplyr-master.zip", repos=NULL, type="source")



    SINTAXIS DEL CODIGO:

    Para mayor claridad, las funciones van precedidas por el nombre de su paquete utilizando el simbolo :: de la siguiente manera: "nombre_paquete::nombre_funcion()"

    Una vez cargado un paquete para una sesion, este estilo explicito no es necesario. Se puede utilizar simplemente "nombre_funcion()". Sin embargo escribir el nombre de la funcion puede resultar necesario cuando el nombre de la funcion puede ser ambiguo y puede existir en mas de un paquete. Escribir el nombre del paquete tambien cargara el paquete en la sesion actual si no esta todavia cargado.

# Este comando usa el packages "rio" y la funcion "import()" para importar un dataset
> linelist <- rio::import("linelist.xlsx", which="Sheet1")



    AYUDA SOBRE UNA FUNCION:

    Para leer mas sobre una funcion, se puede buscar en la pestaña "help" en la parte inferior derecha de RStudio. Tambien se puede ejecutar el comando "?nombre_funcio" aparecera la pagina de ayuda en la pestaña de ayuda. 


    ELIMINAR PAQUETES:

    Podemos utilizar la funcion "p_delete()" del paquete "pacman" o remove.packages() del paquete "utils". Alternativamente puedes buscar la carpeta que contiene el paquete en tu libreria y borrarla manualmente.


    DEPENDENCIAS:

    Los paquetes a menudo dependen de otros paquetes para funcionar. Estos se llaman dependencias. Si una dependencia no esta instalada, entonces el paquete que depende de ella tambien puede no instalarse. 
    Se pueden ver las dependencias de un paquete con "pacman::p_depends()", o ver que paquetes dependen de el con "pacman::p_depends_reverse()"

    Por ejemplo: veamos las dependencias de el packages "tidyverse"

> pacman::p_depends("tidyverse")
$Imports
 [1] "broom"         "conflicted"    "cli"           "dbplyr"        "dplyr"         "dtplyr"        "forcats"       "ggplot2"       "googledrive"   "googlesheets4"
[11] "haven"         "hms"           "httr"          "jsonlite"      "lubridate"     "magrittr"      "modelr"        "pillar"        "purrr"         "ragg"         
[21] "readr"         "readxl"        "reprex"        "rlang"         "rstudioapi"    "rvest"         "stringr"       "tibble"        "tidyr"         "xml2"  

    Son todos los paquetes de los cuales depende "tidyverse"


    FUNCIONES ENMASCARADAS:

    No es raro que dos o mas paquetes contengan el mismo nombre de una funcion. Por ejemplo, el paquete "dplyr" tiene la funcion filter(), pero tambien la tiene el paquete "stats". La funcion filter() por defecto depende del orden en que estos paquetes se cargan por primera vez en la sesion de R el ultimo sera el predeterminado para la funcion filter().

    Cuando se carga por primera vez un paquete, R advertira en la consola si se esta produciendo un enmascaramiento. Pero puede ser facil pasarlo por alto.

    Aqui hay dos maneras de arreglar el enmascaramiento:

      1. Especifica el nombre del paquete en el comando. por ejemplo "dplyr::filter()"
      2. Reordena el orden de la carga de los paquetes por ejemplo, dentro de p_load() e inicia una nueva sesion en R


  
  3.8 SCRIPTS:

    Los scripts son una parte fundamental de la programacion. Son documentos que contienen comandos (por ejemplo, funciones para crear y modificar datos, imprimir visualizaciones, etc). Podemos guardar un script y volverlo a ejecutar mas tarde. Almacenar y ejecutar nuestros comandos desde un script tiene muchas ventajas:

      1. Portabilidad: puedes compartir tu trabajo con otros enviando tus scripts
      2. Reproducibilidad: para que tu y los demas sepan exactamente lo que se ha hecho.
      3. Control de versiones: para que puedas hacer un seguimiento de los cambios realizados por ti mismo o por tus colegas
      4. Comentarios/anotaciones: para explicar a tus compañeros lo que has hecho o a ti mismo.

    COMENTARIOS:
    En un script tambien puedes comentar alrededor de tu codigo R. Los comentarios son utiles para comentarte a ti mismo y a otros lectores los que estamos haciendo. Podemos agregar un comentario con el simbolo "#" y el comentarios seguido. El texto comentado aparecera en un color diferente.

    El codigo despues de # no se ejecutara.
    Colocar un # antes del codigo es tambien una forma temporal de bloquear una linea de codigo (comentarala, si no queremos borrarla).
    Podemos comentar varias lineas a la vez resaltandolas y clicando "Ctrl + Shift + c"

    Consejos:

      -Comemta lo que haces.
      -Divide tu codigo en secciones logicas.
      -Acompaña tu codigo con un texto describiendo paso a paso lo que esta haciendo (pasos enumerados)

    ESTILO: (consultar guia de estilo tidyverse en "3 Fundamentos de R/3.8 Estilo/guia de estilo tidyverse")

    Consejos de estilo:

      -Al nombrar objetos, utiliza solo letras minusculas, numeros o guiones bajos, por ejemplo:
       mis_datos
      -Utiliza espacios frecuentemente, incluso alrededor de los operadores, por ejemplo:
       n = 1, edad_nueva <- edad_vieja + 3

  

  INFORMES CON R-MARKDOWN (seccion 40):

    40 R markdown:

      Un script en R markdown es un tipo de script en R en el que el propio script se convierte en un documento de salida (PDF, Word, HTML, Powerpoint, etc). Se trata de herramientas increiblemente utiles y versatiles que suelen utilizarse para crear informe dinamicos y automatizados. 

      Para saber mas utilizar el manual sobre "Informes con R Markdown"

      INFORMES Y DASHBOARDS:

      R Markdown es una herramienta ampliamente utilizada para crear documentos de salida automatizados, repoducibles para compartir, ejemplo, informes. Podemos generar resultados estaticos o interactivos en word, pdf, html, powerpoint etc.

      Un Script de R Markdown intercala codigo R y texto de tal manera que el script se convierte en tu documento de salida. Puedes crear un documento completo con formato, incluyendo texto narrativo, tablas, figuras, numeros, bibliografias, ect.

      Estos documentos pueden producirse para ser actualizados de forma rutinaria, informes diarios, ejecutables sobre subconjuntos de datos. 

    40.1 Preparacion:

      -Markdown: es un "lenguaje" que permite escribir un documento en texto plano, que se puede convertir en html y otros formatos. No es especifico de R. Los archivos escritos en Markdown tienen una extension ".md"

      -R Markdown: es una variacion de markdown que es especifica de R, te permite escribir un documento usando markdown para producir texto y para integrar codigo R y mostrar sus resultados. Los archivos R Markdown tienen una extension ".Rmd"

      -rmarkdown -el paquete: usado por R para convertir el archivo .Rmd en el tipo de documento de salida deseado. Su objetivo es convertir la sintaxis markdown (texto), por lo que tambien necesitamos... knitr y pacdoc

      -knitr: este paquete de R leera los trozos de codigo, los ejecutara y los tejera dentro del documento. Asi es como se incluyen las tablas y los graficos junto al texto.

      -Pandoc: por ultimo, pandoc convierte el documento de salida en word/pdf/powerpoint, etc. Es un software independiente de R y viene instalado con RStudio.

      
      Instalacion:

      Para crear una salida de R Markdown, necesitamos tener instalado:

      -El paquete rmarkdown (knitr se instalara automaticamente)

      -Pandoc, que deberia venir instalado en RStudio.

*     -Si queremos generar una salida en PDF, necesitamos instalar LaTeX. Para los usuarios de R Mardown que no hayamos instalado LaTeX   
      antes, se recomienda instalar "TinyTeX" 

      TinyTeX: es la version ligera de LaTeX para R que ha hecho Yihui Xie. MikTeX es la version de LaTeX completa para ordenador, pero requiere cierta paciencia y un aprendizaje que no todo el mundo es capaz de sacrificar, es de instalacion complicada. Si solo utilizas LaTeX desde R, la mejor opcion es usar la version ligera de R, que se puede instalar desde el mismo entorno de RStudio.

      Instalamos el paquete "tinytex"

#instala el paquete tinytex
>pacman::p_load(tinytex)   

#Comando de R para instalar el software de Tinytex
>tinytex::install_tinytex()

    
    
    40.2 COMO COMENZAR:

      Instalemos el paquete rmarkdown. 

> pacman::p_load(rmarkdown)  #recordemos que el uso de pacman::p_load - instala si es necesario y carga el paquete.

      Iniciamos un Rmd
      En RStudio. abrir un nuevo Rmd, comenzamos con File -> New file -> R markdown


      RStudio te dara algunas opciones de salida para elegir. Si el tipo de documento de salida que deseamos no es uno de los que elegimos, podemos elegir cualquiera y cambiarlo en el script mas tarde.

      Esto abrira un nuevo script .Rmd 


      El directorio de trabajo:
      Es el lugar donde se guardara el propio archivo Rmd.

    40.3 COMPONENTES DE R MARKDOWN:

      Un documento Rmd puede ser editado en RStudio igual que un script estandar de R. Cuando se inicia un nuevo script de R Markdown, RStudio intenta ayudarnos mostrando una plantilla que explica las diferentes secciones de un script de R Markdown.

      Lo que vemos es lo que aparece al iniciar un script en Rmd destinado a producir un documento de salida en html (nuestro-ejemplo)

      Un R Markdown esta compuesto por tres partes fudamentales:
        -YAML (Metadatos YAML)
        -Markdown text
        -Los Chunk
        
      
      1. Metadatos YAML:

        Denominado "metadatos YAML" o simplemente "YAML" se encuentra en la parte superior del documento R Markdown. Esta seccion del script le dira a su archivo Rmd que tipo de salida producir, preferencias de formato y otros metadatos como el titulo del documento, el autor y la fecha. Ten en cuenta que la sangria es importante, los tabuladores no se aceptan pero los espacios si.

        Esta seccion debe comenzar con una linea que tenga solo tres guiones --- y debe cerrar con una linea que tenga solo tres guiones --- Los parametros YAML vienen en pares "key:value". La colocacion de los dos puntos en YAML es importante.

        El YAML debe comenzar con los metadatos del documento. El orden de estos parametros YAML primarios no importa, por ejemplo:

---
title: "My document"
author: "Me"
date: "2023-12-27"
output: html_document
---

        En output, podemos cambiar el tipo de salida, por: 
          -powerpoint_presentation, 
          -word_document
          -pdf_document

      2. Texto (Markdown text)

      -Formato de texto: es la narrativa de nuestro documento, uncluyendo los titulos y los encabezados. 
      
      -Rodea el texto normal con estos caracteres para cambiar su apariencia:

      -Guiones bajos/un asterisco simple (_texto_) o (*texto*) para poner en cursiva (italica)
      -Doble asterisco (**texto**) para el texto en negrita
      -Comilla invertida para mostrar el texto como codigo.

      
      -Titulos y encabezados:

      Un simbolo de hash (#) delante de un texto en un script de R Marldown creara un encabezado (dentro de un markdown text). Esto es diferente que un trozo de codigo (script) R en un chunk, en el que un simbolo hash permite comentar, anotar, desactivar como en un script normal de R,
      
      Los distintos niveles de encabezados se establecen con diferentes nuemeros de simbolos de hash al comienzo de una nueva linea.
      Un solo simbolo de hash genera un titulo o encabezado primario. Dos generan un encabezado de segundo nivel, los encabezados de tercer y cuarto nivel pueden hacerse con mas simbolos hash sucesivamente.

        # Encabezado / Titulo de primer nivel
        ## Encabezamiento de segundo nivel
        ### Encabezamiento de tercer nivel


      -Viñetas y enumeracion:

      Utiliza asteriscos (*) para crear una lista de vieñetas. Introduce dos espacio, presiona enter dos veces y luego comienza tus vieñetas. Incluir un espacio entre el asterisco y el texto de tu vieñeta. Despues de cada vieñeta, introducir dos espacios y luego preciona enter. Las sub-vieñeta funcionan de la misma manera pero con sangria. Los numeros funcionan de la misma manera pero en vez de un asterisco, escribir 1), 2) etc. Ejemplos:

      Aquí están mis viñetas (hay dos espacios después de los dos puntos):

      * Viñeta 1 (seguida de dos espacios y Enter/Return)
      * Viñeta 2 (seguida de dos espacios y Enter/Return)
        * Sub-viñeta 1 (seguida de dos espacios y Enter/Return)
        * Sub-viñeta 2 (seguida de dos espacios y Enter/Return)
      * Subbalanceo 2 (seguido de dos espacios y Enter/Return)

      =Comentar texto:

      Puedes activar o esconder texto en un R Markdown del mismo modo que podemos utilizar el hash (#) para desactivar una linea de codigo en un chunk de R, simplemente resalta el texto y clica el comando "Ctrl+Shift+c". El texto aparecera rodeado de flechas y se volvera verde. No aparecera en tu salida.

    3. Trozos de codigo (chunks):

      Las secciones del script que se dedican a ejecutar el codigo R se dedominan "chunks" o trozos. Aqui es donde se pueden cargar paquetes, importar datos y realizar la gestion y visualizacion de datos propiamente dicha.

      Puede haber muchos trozos de codigo, por lo que puede ser de ayuda organizar tu codigo R en partes, quiza intercaladas con texto, estos trozos tendran un color de fondo ligeramente diferente a la parte narrativa del documento.

      Cada chunk se abre con una linea que comienza con tres comillas invertidas y corchetes ```{} que contienen parametros para el trozo chunk. El trozo termina con tres comillas invertidas.
      
      Podemos escribir un nuevo chunk, escribiendo manualmente la sintaxis o con el atajo de teclado "Ctrl + Alt + i" el cual nos agrega en nuestro script las lineas siguientes:

        ```{r}
        
        ```

      -Notas sobre el contenido de los corchetes en un chunk {}:

        1. Comienzan con "r" para indicar que el nombre del idioma dentro del chunk es R.
        2. Despues de la r, puedes signarle un nombre al chunk - no es necesario pero puede ayudar a organizar tu trabajo.
          Ten en cuenta que si nombramos nuestros chunks, debemos usar siempre nombres unicos, de lo contrario R mandara error.

        3. Los corchetes pueden uncluir tambien otras opciones, escritas como tag=value, como por ejemplo:

          - eval = FALSE para no ejecutar el codigo R.
          - echo = FALSE para no imprimir o esconder el codigo fuente de R del chunk en el documento de salida.
          - warning = FALSE para no imprimir las advertencias producidas por el codigo R.
          - message = FLASE para no imprimir ningun mensaje producido por el codigo R.
          - incluide = TRUE/FALSE para incluir (o no) los resultados generados por los trozos (por ejemplo los graficos) en el
            ducumento de salida.
          -out.width = y out.height = asigna proporciones de ancho y largo, por ejemplo: out.width = "75%"
          -fig.align = "center" ajusta como se alinea una figura en la pagina.
          -fig.show = 'hold' si tu chunk imprime multiples figuras y quieres imprimirlas una al lado de la otra usa tambien la funcion    
            out.width = c('33%','67%'). Tambien puedes establecer como fig.show='asis' para mostrarlas debajo del codigo que las genera.
            out.show = 'hide' para ocultarlas, o out.show='animate' para concatenar varias figuras en una animacion.
        4. La cabecera de un trozo debe escribirse en una sola linea.
        5. Intenta evitar puntos, barras bajas y espacios. Utiliza guiones (-) en su lugar si necesitas un separador.
        6. Podemos leer mas extensamente sobre knitr en https://yihui.org/knitr/options/

        Algunas de las opciones antes mostradas se pueden configurar con el engrane que aparece en la parte superior derecha del chunk qui puedes especificar que partes del chunk quieres incluir en el documento renderizado, las salidas generadas y las advertencias. Estas prefeerencias aparareceran escritas como codigo dentro de los corchetes, si especificas que quieres mostrar solo la salida (Show output only) aparecera echo = FALSE entre los corchetes.

        Tambien hay dos flechas en la parte superior del chunk, que son utiles para ejecutar el codigo dentro de un trozo o todo el codigo en chunks anteriores.

        Para que las opciones globales apliquen a todos los chunks del script, podemos configurar esto dentro del primer chunk de codigo R en el script. Para mostrar las salidas generadas por cada trozo de codigo y no el propio codigo, podemos inlcuir este comando en el chunk de codigo R:

          -knitr::opts_chunk$set(echo=FALSE)

        Codigo R en el texto








